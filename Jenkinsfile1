pipeline {
    agent any

    environment {
        // Replace with your DockerHub username/repo
        IMAGE_NAME = 'saraswathi6/React'
        IMAGE_TAG = "${env.BUILD_NUMBER}"

        // Jenkins credential IDs you set up
        DOCKER_CREDENTIALS_ID = 'dockerhub-creds'
        KUBECONFIG_CREDENTIALS_ID = 'kubeconfig'
    }

    stages {

        stage('Checkout Source') {
            steps {
                echo 'üì• Cloning repository...'
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "üê≥ Building Docker image: ${IMAGE_NAME}:${IMAGE_TAG}"
                script {
                    docker.build("${IMAGE_NAME}:${IMAGE_TAG}")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                echo "üöÄ Pushing Docker image to Docker Hub"
                withDockerRegistry([credentialsId: DOCKER_CREDENTIALS_ID, url: '']) {
                    script {
                        docker.image("${IMAGE_NAME}:${IMAGE_TAG}").push()
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                echo "üì¶ Deploying to Kubernetes cluster"
                withCredentials([file(credentialsId: KUBECONFIG_CREDENTIALS_ID, variable: 'KUBECONFIG')]) {
                    sh '''
                        export KUBECONFIG=$KUBECONFIG

                        echo "üîÑ Replacing image in deployment.yaml..."
                        sed -i "s|image:.*|image: '${IMAGE_NAME}:${IMAGE_TAG}'|" k8s/deployment.yaml

                        echo "üìÑ Applying Kubernetes manifests..."
                        kubectl apply -f k8s/deployment.yaml
                        kubectl apply -f k8s/service.yaml
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Deployment successful!"
        }
        failure {
            echo "‚ùå Deployment failed!"
        }
    }
}
